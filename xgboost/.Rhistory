path <- "~/R"
setwd(path)
path <- "E:/R"
setwd(path)
library(data.table)
library(mlr)
setcol <- c("age",
"workclass",
"fnlwgt",
"education",
"education-num",
"marital-status",
"occupation",
"relationship",
"race",
"sex",
"capital-gain",
"capital-loss",
"hours-per-week",
"native-country",
"target")
train <- read.table("adultdata.txt",header = F,sep = ",",col.names = setcol,na.strings = c(" ?"),stringsAsFactors = F)
train <- read.table("adult_data.txt",header = F,sep = ",",col.names = setcol,na.strings = c(" ?"),stringsAsFactors = F)
test <- read.table("adult_test.txt",header = F,sep = ",",col.names = setcol,skip = 1, na.strings = c(" ?"),stringsAsFactors = F)
setDT(train)
setDT(test)
table(is.na(train))
sapply(train, function(x) sum(is.na(x))/length(x))*100
table(is.na(test))
sapply(test, function(x) sum(is.na(x))/length(x))*100
library(stringr)
test[,target := substr(target,start = 1,stop = nchar(target)-1)]
char_col <- colnames(train)[sapply(test,is.character)]
for(i in char_col)
set(train,j=i,value = str_trim(train[[i]],side = "left"))
for(i in char_col)
set(test,j=i,value = str_trim(test[[i]],side = "left"))
train[is.na(train)] <- "Missing"
test[is.na(test)] <- "Missing"
labels <- train$target
ts_label <- test$target
new_tr <- model.matrix(~.+0,data = train[,-c("target"),with=F])
new_ts <- model.matrix(~.+0,data = test[,-c("target"),with=F])
labels <- as.numeric(labels)-1
ts_label <- as.numeric(ts_label)-1
dtrain <- xgb.DMatrix(data = new_tr,label = labels)
library(xgboost)
set(train,j=i,value = str_trim(train[[i]],side = "left"))
for(i in char_col)
set(train,j=i,value = str_trim(train[[i]],side = "left"))
for(i in char_col)
set(test,j=i,value = str_trim(test[[i]],side = "left"))
train[is.na(train)] <- "Missing"
test[is.na(test)] <- "Missing"
labels <- train$target
ts_label <- test$target
new_tr <- model.matrix(~.+0,data = train[,-c("target"),with=F])
new_ts <- model.matrix(~.+0,data = test[,-c("target"),with=F])
labels <- as.numeric(labels)-1
View(test)
dtrain <- xgb.DMatrix(data = new_tr,label = labels)
dtest <- xgb.DMatrix(data = new_ts,label=ts_label)
dtrain <- xgb.DMatrix(data = new_tr,label = labels)
dtest <- xgb.DMatrix(data = new_ts,label=ts_label)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 100
,nfold = 5
,showsd = T
,stratified = T
,print.every.n = 10
,early.stop.round = 20
,maximize = F
)
min(xgbcv$test.error.mean)
